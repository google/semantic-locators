/**
 * @license
 * Copyright 2021 The Semantic Locators Authors
 * SPDX-License-Identifier: Apache-2.0
 */

/**
 * DO NOT EDIT - this file is autogenerated by
 * testing/web/labs/semantic_locators/codegen:checked_in_role_map
 */
import {ConditionType, RoleSelector} from './types';

/** Role which has no native HTML equivalent. */
export type AriaOnlyRole = typeof ARIA_ONLY_ROLES_ARRAY[number];

/** Type guard for AriaOnlyRole */
export function isAriaOnlyRole(role: string): role is AriaOnlyRole {
  return ARIA_ONLY_ROLES.has(role);
}

/** Role which has a native HTML equivalent. */
export type ImplicitRole = keyof typeof CONST_ROLE_MAP;

/** Type guard for ImplicitRole */
export function isImplicitRole(role: string): role is ImplicitRole {
  return ROLE_MAP.hasOwnProperty(role);
}
/** Union type of all non-abstract ARIA roles. */
export type AriaRole = AriaOnlyRole|ImplicitRole;

/** Type guard for AriaRole */
export function isAriaRole(role: string): role is AriaRole {
  return isAriaOnlyRole(role) || isImplicitRole(role);
}

/** Map from role to a RoleSelector for finding that role. */
export type RoleMap = {
  readonly[role in ImplicitRole]: RoleSelector;
};

// clang-format off
const ARIA_ONLY_ROLES_ARRAY = [
 "alert",
 "alertdialog",
 "application",
 "directory",
 "feed",
 "grid",
 "log",
 "marquee",
 "menu",
 "menubar",
 "menuitem",
 "menuitemcheckbox",
 "menuitemradio",
 "note",
 "radiogroup",
 "scrollbar",
 "search",
 "switch",
 "tab",
 "tablist",
 "tabpanel",
 "timer",
 "toolbar",
 "tooltip",
 "tree",
 "treegrid",
 "treeitem"
] as const;
// clang-format on

/**
 * All roles which have no native HTML equivalent, and can only be expressed
 * explicitly.
 */
export const ARIA_ONLY_ROLES = new Set<string>(ARIA_ONLY_ROLES_ARRAY);

// TODO(alexlloyd) generate this list from the spec
/**
 * Roles with presentational children.
 * https://www.w3.org/TR/wai-aria-practices/#children_presentational
 */
export const CHILDREN_PRESENTATIONAL = [
  'button',
  'checkbox',
  'img',
  'math',
  'menuitemcheckbox',
  'menuitemradio',
  // 'option', // TODO(b/180594818) enforce for option
  'progressbar',
  'radio',
  'scrollbar',
  'separator',
  'slider',
  'switch',
  'tab',
] as const;

type ChildrenPresentational = typeof CHILDREN_PRESENTATIONAL[number];

/**
 * Whether the given role has presentational children.
 * https://www.w3.org/TR/wai-aria-practices/#children_presentational
 */
export function isChildrenPresentational(role: AriaRole):
    role is ChildrenPresentational {
  return CHILDREN_PRESENTATIONAL.includes(role as ChildrenPresentational);
}

// clang-format off
const CONST_ROLE_MAP = {
 'article': {
  exactSelector: 'article',
 },
 'banner': {
  conditionalSelectors: [
   {
    greedySelector: 'header',
    conditions: [
     {
      type: ConditionType.FORBIDDEN_ANCESTORS,
      forbiddenAncestorSelector: 'article,aside,main,nav,section,[role="article"],[role="complementary"],[role="main"],[role="navigation"],[role="region"]',
     },
    ],
   },
  ],
 },
 'button': {
  exactSelector: 'button,summary',
  conditionalSelectors: [
   {
    greedySelector: 'input',
    conditions: [
     {
      type: ConditionType.PROPERTY_TAKES_ONE_OF_STRING_VALUES,
      propertyName: 'type',
      values: [
       'button',
       'image',
       'reset',
       'submit',
      ],
     },
    ],
   },
  ],
 },
 'cell': {
  conditionalSelectors: [
   {
    greedySelector: 'td',
    conditions: [
     {
      type: ConditionType.CLOSEST_ANCESTOR_TAG_HAS_ROLE,
      tag: 'table',
      role: 'table',
     },
    ],
   },
   {
    greedySelector: 'th:not([scope="col"]):not([scope="colgroup"]):not([scope="row"]):not([scope="rowgroup"])',
    conditions: [
     {
      type: ConditionType.CLOSEST_ANCESTOR_TAG_HAS_ROLE,
      tag: 'table',
      role: 'table',
     },
     {
      type: ConditionType.DATA_IN_COLUMN,
      dataInColumn: true,
     },
     {
      type: ConditionType.DATA_IN_ROW,
      dataInRow: true,
     },
    ],
   },
  ],
 },
 'checkbox': {
  conditionalSelectors: [
   {
    greedySelector: 'input',
    conditions: [
     {
      type: ConditionType.PROPERTY_TAKES_ONE_OF_STRING_VALUES,
      propertyName: 'type',
      values: [
       'checkbox',
      ],
     },
    ],
   },
  ],
 },
 'columnheader': {
  exactSelector: 'th[scope="col"],th[scope="colgroup"]',
  conditionalSelectors: [
   {
    greedySelector: 'th:not([scope="col"]):not([scope="colgroup"]):not([scope="row"]):not([scope="rowgroup"])',
    conditions: [
     {
      type: ConditionType.DATA_IN_ROW,
      dataInRow: false,
     },
    ],
   },
  ],
 },
 'combobox': {
  exactSelector: 'select:not([multiple]):not([size])',
  conditionalSelectors: [
   {
    greedySelector: 'select:not([multiple])',
    conditions: [
     {
      type: ConditionType.ATTRIBUTE_VALUE_LESS_THAN,
      attribute: 'size',
      value: 2,
     },
    ],
   },
   {
    greedySelector: 'input[list]',
    conditions: [
     {
      type: ConditionType.PROPERTY_TAKES_ONE_OF_STRING_VALUES,
      propertyName: 'type',
      values: [
       'email',
       'search',
       'tel',
       'text',
       'url',
      ],
     },
    ],
   },
  ],
 },
 'complementary': {
  exactSelector: 'aside',
 },
 'contentinfo': {
  conditionalSelectors: [
   {
    greedySelector: 'footer',
    conditions: [
     {
      type: ConditionType.FORBIDDEN_ANCESTORS,
      forbiddenAncestorSelector: 'article,aside,main,nav,section,[role="article"],[role="complementary"],[role="main"],[role="navigation"],[role="region"]',
     },
    ],
   },
  ],
 },
 'definition': {
  exactSelector: 'dd',
 },
 'dialog': {
  exactSelector: 'dialog',
 },
 'document': {
  exactSelector: 'body',
 },
 'figure': {
  exactSelector: 'figure',
 },
 'form': {
  conditionalSelectors: [
   {
    greedySelector: 'form',
    conditions: [
     {
      type: ConditionType.HAS_ACCESSIBLE_NAME,
     },
    ],
   },
  ],
 },
 'gridcell': {
  conditionalSelectors: [
   {
    greedySelector: 'td',
    conditions: [
     {
      type: ConditionType.CLOSEST_ANCESTOR_TAG_HAS_ROLE,
      tag: 'table',
      role: 'grid',
     },
    ],
   },
   {
    greedySelector: 'td',
    conditions: [
     {
      type: ConditionType.CLOSEST_ANCESTOR_TAG_HAS_ROLE,
      tag: 'table',
      role: 'treegrid',
     },
    ],
   },
   {
    greedySelector: 'th:not([scope="col"]):not([scope="colgroup"]):not([scope="row"]):not([scope="rowgroup"])',
    conditions: [
     {
      type: ConditionType.CLOSEST_ANCESTOR_TAG_HAS_ROLE,
      tag: 'table',
      role: 'treegrid',
     },
     {
      type: ConditionType.DATA_IN_COLUMN,
      dataInColumn: true,
     },
     {
      type: ConditionType.DATA_IN_ROW,
      dataInRow: true,
     },
    ],
   },
  ],
 },
 'group': {
  exactSelector: 'details,fieldset,optgroup',
 },
 'heading': {
  exactSelector: 'h1,h2,h3,h4,h5,h6',
 },
 'img': {
  exactSelector: 'img:not([alt]),img[alt]:not([alt=""])',
 },
 'link': {
  exactSelector: 'a[href],area[href],link[href]',
 },
 'list': {
  exactSelector: 'menu,ol,ul',
 },
 'listbox': {
  exactSelector: 'datalist,select[multiple]',
  conditionalSelectors: [
   {
    greedySelector: 'select',
    conditions: [
     {
      type: ConditionType.ATTRIBUTE_VALUE_GREATER_THAN,
      attribute: 'size',
      value: 1,
     },
    ],
   },
  ],
 },
 'listitem': {
  exactSelector: 'li',
 },
 'main': {
  exactSelector: 'main',
 },
 'math': {
  exactSelector: 'math',
 },
 'navigation': {
  exactSelector: 'nav',
 },
 'option': {
  exactSelector: 'datalist > option,select > optgroup > option,select > option',
 },
 'progressbar': {
  exactSelector: 'progress',
 },
 'radio': {
  conditionalSelectors: [
   {
    greedySelector: 'input',
    conditions: [
     {
      type: ConditionType.PROPERTY_TAKES_ONE_OF_STRING_VALUES,
      propertyName: 'type',
      values: [
       'radio',
      ],
     },
    ],
   },
  ],
 },
 'region': {
  conditionalSelectors: [
   {
    greedySelector: 'section',
    conditions: [
     {
      type: ConditionType.HAS_ACCESSIBLE_NAME,
     },
    ],
   },
  ],
 },
 'row': {
  exactSelector: 'tr',
 },
 'rowgroup': {
  exactSelector: 'tbody,tfoot,thead',
 },
 'rowheader': {
  exactSelector: 'th[scope="row"],th[scope="rowgroup"]',
  conditionalSelectors: [
   {
    greedySelector: 'th:not([scope="col"]):not([scope="colgroup"]):not([scope="row"]):not([scope="rowgroup"])',
    conditions: [
     {
      type: ConditionType.DATA_IN_COLUMN,
      dataInColumn: false,
     },
     {
      type: ConditionType.DATA_IN_ROW,
      dataInRow: true,
     },
    ],
   },
  ],
 },
 'searchbox': {
  conditionalSelectors: [
   {
    greedySelector: 'input:not([list])',
    conditions: [
     {
      type: ConditionType.PROPERTY_TAKES_ONE_OF_STRING_VALUES,
      propertyName: 'type',
      values: [
       'search',
      ],
     },
    ],
   },
  ],
 },
 'separator': {
  exactSelector: 'hr',
 },
 'slider': {
  conditionalSelectors: [
   {
    greedySelector: 'input',
    conditions: [
     {
      type: ConditionType.PROPERTY_TAKES_ONE_OF_STRING_VALUES,
      propertyName: 'type',
      values: [
       'range',
      ],
     },
    ],
   },
  ],
 },
 'spinbutton': {
  conditionalSelectors: [
   {
    greedySelector: 'input',
    conditions: [
     {
      type: ConditionType.PROPERTY_TAKES_ONE_OF_STRING_VALUES,
      propertyName: 'type',
      values: [
       'number',
      ],
     },
    ],
   },
  ],
 },
 'status': {
  exactSelector: 'output',
 },
 'table': {
  exactSelector: 'table',
 },
 'term': {
  exactSelector: 'dfn,dt',
 },
 'textbox': {
  exactSelector: 'textarea',
  conditionalSelectors: [
   {
    greedySelector: 'input:not([list])',
    conditions: [
     {
      type: ConditionType.PROPERTY_TAKES_ONE_OF_STRING_VALUES,
      propertyName: 'type',
      values: [
       'email',
       'tel',
       'text',
       'url',
      ],
     },
    ],
   },
  ],
 },
} as const;
// clang-format on

/**
 * Mapping from a HTML tag name to all possible roles that tag can take
 * implicitly. Use ROLE_MAP to work out which role actually applies to a given
 * element.
 */
// clang-format off
export const IMPLICIT_ROLES_FOR_TAGNAME:
    {[tagName: string]: readonly ImplicitRole[]} = {
 "a": [
  "link"
 ],
 "area": [
  "link"
 ],
 "article": [
  "article"
 ],
 "aside": [
  "complementary"
 ],
 "body": [
  "document"
 ],
 "button": [
  "button"
 ],
 "datalist": [
  "listbox"
 ],
 "dd": [
  "definition"
 ],
 "details": [
  "group"
 ],
 "dfn": [
  "term"
 ],
 "dialog": [
  "dialog"
 ],
 "dt": [
  "term"
 ],
 "fieldset": [
  "group"
 ],
 "figure": [
  "figure"
 ],
 "footer": [
  "contentinfo"
 ],
 "form": [
  "form"
 ],
 "h1": [
  "heading"
 ],
 "h2": [
  "heading"
 ],
 "h3": [
  "heading"
 ],
 "h4": [
  "heading"
 ],
 "h5": [
  "heading"
 ],
 "h6": [
  "heading"
 ],
 "header": [
  "banner"
 ],
 "hr": [
  "separator"
 ],
 "img": [
  "img"
 ],
 "input": [
  "button",
  "checkbox",
  "combobox",
  "radio",
  "searchbox",
  "slider",
  "spinbutton",
  "textbox"
 ],
 "li": [
  "listitem"
 ],
 "link": [
  "link"
 ],
 "main": [
  "main"
 ],
 "math": [
  "math"
 ],
 "menu": [
  "list"
 ],
 "nav": [
  "navigation"
 ],
 "ol": [
  "list"
 ],
 "optgroup": [
  "group"
 ],
 "option": [
  "option"
 ],
 "output": [
  "status"
 ],
 "progress": [
  "progressbar"
 ],
 "section": [
  "region"
 ],
 "select": [
  "combobox",
  "listbox"
 ],
 "summary": [
  "button"
 ],
 "table": [
  "table"
 ],
 "tbody": [
  "rowgroup"
 ],
 "td": [
  "cell",
  "gridcell"
 ],
 "textarea": [
  "textbox"
 ],
 "tfoot": [
  "rowgroup"
 ],
 "th": [
  "cell",
  "columnheader",
  "gridcell",
  "rowheader"
 ],
 "thead": [
  "rowgroup"
 ],
 "tr": [
  "row"
 ],
 "ul": [
  "list"
 ]
} as const;
// clang-format on

/** Mapping from role to selectors for implicit HTML for that role. */
export const ROLE_MAP: RoleMap = CONST_ROLE_MAP;

/** Roles ignored by semantic locators. */
// clang-format off
export const IGNORED_ROLES = ["none","presentation"];
// clang-format on
